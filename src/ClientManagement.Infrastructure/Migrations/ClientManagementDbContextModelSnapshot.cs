// <auto-generated />
using System;
using ClientManagement.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClientManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ClientManagementDbContext))]
    partial class ClientManagementDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("client_management")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClientManagement.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("address");

                    b.Property<string>("Cif")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cif");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("email");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("status");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_clients_tenant_id");

                    b.HasIndex("TenantId", "Cif")
                        .IsUnique()
                        .HasDatabaseName("ix_clients_tenant_cif");

                    b.HasIndex("TenantId", "Email")
                        .IsUnique()
                        .HasDatabaseName("ix_clients_tenant_email");

                    b.HasIndex("TenantId", "IsDeleted")
                        .HasDatabaseName("ix_clients_tenant_deleted");

                    b.HasIndex("TenantId", "Name")
                        .HasDatabaseName("ix_clients_tenant_name");

                    b.HasIndex("TenantId", "DeletedAt", "DeletedBy")
                        .HasDatabaseName("ix_clients_tenant_deletion_audit")
                        .HasFilter("deleted_at IS NOT NULL");

                    b.ToTable("clients", "client_management");
                });

            modelBuilder.Entity("ClientManagement.Domain.Entities.ClientGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_client_groups_tenant_id");

                    b.HasIndex("TenantId", "IsDeleted")
                        .HasDatabaseName("ix_client_groups_tenant_deleted");

                    b.HasIndex("TenantId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_client_groups_tenant_name");

                    b.ToTable("client_groups", "client_management");
                });

            modelBuilder.Entity("ClientManagement.Domain.Entities.ClientGroupMembership", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<string>("AddedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_at");

                    b.HasKey("ClientId", "GroupId");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_group_memberships_client_id");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_client_group_memberships_group_id");

                    b.ToTable("client_group_memberships", "client_management");
                });

            modelBuilder.Entity("ClientManagement.Domain.Entities.ClientGroupMembership", b =>
                {
                    b.HasOne("ClientManagement.Domain.Entities.Client", "Client")
                        .WithMany("ClientGroupMemberships")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClientManagement.Domain.Entities.ClientGroup", "Group")
                        .WithMany("ClientGroupMemberships")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ClientManagement.Domain.Entities.Client", b =>
                {
                    b.Navigation("ClientGroupMemberships");
                });

            modelBuilder.Entity("ClientManagement.Domain.Entities.ClientGroup", b =>
                {
                    b.Navigation("ClientGroupMemberships");
                });
#pragma warning restore 612, 618
        }
    }
}
