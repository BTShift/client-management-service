// <auto-generated />
using System;
using ClientManagement.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClientManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ClientManagementDbContext))]
    [Migration("20250828112319_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("client_management")
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClientManagement.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("AdminContactPerson")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("admin_contact_person");

                    b.Property<Guid?>("AssignedTeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("assigned_team_id");

                    b.Property<string>("BillingContactPerson")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("billing_contact_person");

                    b.Property<string>("CnssNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cnss_number");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("company_name");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("deleted_by");

                    b.Property<DateTime?>("FiscalYearEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fiscal_year_end");

                    b.Property<string>("IceNumber")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("ice_number");

                    b.Property<string>("Industry")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("industry");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("RcNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("rc_number");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Active")
                        .HasColumnName("status");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("VatNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("vat_number");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTeamId")
                        .HasDatabaseName("ix_clients_assigned_team_id")
                        .HasFilter("assigned_team_id IS NOT NULL");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_clients_tenant_id");

                    b.HasIndex("TenantId", "CnssNumber")
                        .HasDatabaseName("ix_clients_tenant_cnss_number")
                        .HasFilter("cnss_number IS NOT NULL");

                    b.HasIndex("TenantId", "CompanyName")
                        .HasDatabaseName("ix_clients_tenant_company_name");

                    b.HasIndex("TenantId", "IceNumber")
                        .HasDatabaseName("ix_clients_tenant_ice_number")
                        .HasFilter("ice_number IS NOT NULL");

                    b.HasIndex("TenantId", "IsDeleted")
                        .HasDatabaseName("ix_clients_tenant_deleted");

                    b.HasIndex("TenantId", "RcNumber")
                        .HasDatabaseName("ix_clients_tenant_rc_number")
                        .HasFilter("rc_number IS NOT NULL");

                    b.HasIndex("TenantId", "Status")
                        .HasDatabaseName("ix_clients_tenant_status");

                    b.HasIndex("TenantId", "VatNumber")
                        .HasDatabaseName("ix_clients_tenant_vat_number")
                        .HasFilter("vat_number IS NOT NULL");

                    b.HasIndex("TenantId", "DeletedAt", "DeletedBy")
                        .HasDatabaseName("ix_clients_tenant_deletion_audit")
                        .HasFilter("deleted_at IS NOT NULL");

                    b.ToTable("clients", "client_management");
                });

            modelBuilder.Entity("ClientManagement.Domain.Entities.ClientGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tenant_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex("TenantId")
                        .HasDatabaseName("ix_client_groups_tenant_id");

                    b.HasIndex("TenantId", "IsDeleted")
                        .HasDatabaseName("ix_client_groups_tenant_deleted");

                    b.HasIndex("TenantId", "Name")
                        .IsUnique()
                        .HasDatabaseName("ix_client_groups_tenant_name");

                    b.ToTable("client_groups", "client_management");
                });

            modelBuilder.Entity("ClientManagement.Domain.Entities.ClientGroupMembership", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.Property<string>("AddedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("added_by");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_at");

                    b.HasKey("ClientId", "GroupId");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_client_group_memberships_client_id");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_client_group_memberships_group_id");

                    b.ToTable("client_group_memberships", "client_management");
                });

            modelBuilder.Entity("ClientManagement.Domain.Entities.UserClientAssociation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("assigned_at");

                    b.Property<string>("AssignedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("assigned_by");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<string>("TenantId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("tenant_id");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("TenantId", "ClientId")
                        .HasDatabaseName("ix_user_client_associations_client");

                    b.HasIndex("TenantId", "UserId")
                        .HasDatabaseName("ix_user_client_associations_user");

                    b.HasIndex("TenantId", "UserId", "ClientId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_client_associations_unique");

                    b.ToTable("user_client_associations", "client_management");
                });

            modelBuilder.Entity("ClientManagement.Domain.Entities.ClientGroupMembership", b =>
                {
                    b.HasOne("ClientManagement.Domain.Entities.Client", "Client")
                        .WithMany("ClientGroupMemberships")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClientManagement.Domain.Entities.ClientGroup", "Group")
                        .WithMany("ClientGroupMemberships")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("ClientManagement.Domain.Entities.UserClientAssociation", b =>
                {
                    b.HasOne("ClientManagement.Domain.Entities.Client", "Client")
                        .WithMany("UserAssociations")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ClientManagement.Domain.Entities.Client", b =>
                {
                    b.Navigation("ClientGroupMemberships");

                    b.Navigation("UserAssociations");
                });

            modelBuilder.Entity("ClientManagement.Domain.Entities.ClientGroup", b =>
                {
                    b.Navigation("ClientGroupMemberships");
                });
#pragma warning restore 612, 618
        }
    }
}
